#define NPC_TEXTID_MAIDEN_OF_DRAK_MAR_01 "Are those winter hyacinths? For me?"
#define NPC_TEXTID_MAIDEN_OF_DRAK_MAR_02 "It\'s been so long since a traveler has come here bearing flowers."
#define NPC_TEXTID_MAIDEN_OF_DRAK_MAR_03 "The lake has been too lonely these past years. The travelers stopped coming and evil came to these waters."
#define NPC_TEXTID_MAIDEN_OF_DRAK_MAR_04 "Your gift is a rare kindness, traveler. Please take this blade with my gratitude. Long ago, another traveler left it here, but I have little use for it."
#define MAIDEN_OF_DRAK_MAR_TIMER_00 2000
#define MAIDEN_OF_DRAK_MAR_TIMER_01 5000
#define MAIDEN_OF_DRAK_MAR_TIMER_02 6000
#define MAIDEN_OF_DRAK_MAR_TIMER_03 7000
#define MAIDEN_OF_DRAK_MAR_TIMER_04 20000
#define GO_DRAKMAR_LILY_PAD 194239
#define MAIDEN_OF_DRAK_MAR_GOB_02 194238
//Summon  :X: 4602.977 Y: -1600.141 Z: 156.7834 O: 0.7504916

class npc_maiden_of_drak_mar : public CreatureScript
{
public:
    npc_maiden_of_drak_mar() : CreatureScript("npc_maiden_of_drak_mar") { }

    struct npc_maiden_of_drak_marAI : public ScriptedAI
    {
        uint32 phase;
        uint32 uiPhaseTimer;
        uint64 firstGobGuid;
        uint64 secondGobGuid;

        npc_maiden_of_drak_marAI(Creature *c) : ScriptedAI(c)
        {
            phase = 0;
            uiPhaseTimer = MAIDEN_OF_DRAK_MAR_TIMER_00;
            if(GameObject* go = me->SummonGameObject(GO_DRAKMAR_LILY_PAD,4602.977f,-1600.141f,156.7834f,0.7504916f,0,0,0,0,0))
                firstGobGuid = go->GetGUID();
        }

        void UpdateAI(const uint32 diff)
        {
            if (uiPhaseTimer <= diff)
            {
                phase++;
                switch (phase)
                {
                    case 1:
                        Talk(NPC_TEXTID_MAIDEN_OF_DRAK_MAR_01);
                        uiPhaseTimer = MAIDEN_OF_DRAK_MAR_TIMER_01;
                        break;
                    case 2:
                        Talk(NPC_TEXTID_MAIDEN_OF_DRAK_MAR_02);
                        uiPhaseTimer = MAIDEN_OF_DRAK_MAR_TIMER_02;
                        break;
                    case 3:
                        Talk(NPC_TEXTID_MAIDEN_OF_DRAK_MAR_03);
                        uiPhaseTimer = MAIDEN_OF_DRAK_MAR_TIMER_03;
                        break;
                    case 4:
                        Talk(NPC_TEXTID_MAIDEN_OF_DRAK_MAR_04);
                        if(GameObject* go = me->SummonGameObject(MAIDEN_OF_DRAK_MAR_GOB_02,4603.351f,-1599.288f,156.8822f,2.234018f,0,0,0,0,0))
                           secondGobGuid = go->GetGUID(); 
                        uiPhaseTimer = MAIDEN_OF_DRAK_MAR_TIMER_04;
                        break;
                    case 5:
                        if (GameObject* go = GameObject::GetGameObject(*me,firstGobGuid))
                            go->RemoveFromWorld();
                        if (GameObject* go = GameObject::GetGameObject(*me,secondGobGuid))
                            go->RemoveFromWorld();
                        me->DespawnOrUnsummon();
                        break;
                    default:
                        if (GameObject* go = GameObject::GetGameObject(*me,firstGobGuid))
                            go->RemoveFromWorld();
                        if (GameObject* go = GameObject::GetGameObject(*me,secondGobGuid))
                            go->RemoveFromWorld();
                        me->DespawnOrUnsummon();
                    break;
                }
            }
            else
            {
            uiPhaseTimer -= diff;
        }
    }
};
    CreatureAI *GetAI(Creature *pCreature) const
    {
        return new npc_maiden_of_drak_marAI(pCreature);
    }
};

/*######## Free Your Mind Quest 12893######*/

enum YourMind
{
    QUEST_FREE_YOUR_MIND                = 12893,
    SPELL_SOVEREIGN_ROD                 = 29070,
    NPC_VILE_CREDIT_BUNNY               = 29845,
    NPC_LADY_NIGHTSWOOD_CREDIT_BUNNY    = 29846,
    NPC_LEAPER_BUNNY                    = 29847
};

class npc_vile : public CreatureScript
{
public:
    npc_vile() : CreatureScript("npc_vile") { }

    CreatureAI* GetAI(Creature* pCreature) const
    {
        return new npc_vileAI (pCreature);
    }

    struct npc_vileAI : public ScriptedAI
    {
        npc_vileAI(Creature *c) : ScriptedAI(c) {}

        bool spellHit;

        void Reset()
        {
            spellHit = false;
        }

        void SpellHit(Unit *Hitter, const SpellInfo *Spellkind)
        {
            if ((Spellkind->Id == SPELL_SOVEREIGN_ROD) && !spellHit &&
                (Hitter->GetTypeId() == TYPEID_PLAYER) && (CAST_PLR(Hitter)->IsActiveQuest(QUEST_FREE_YOUR_MIND)))
            {
                CAST_PLR(Hitter)->KilledMonsterCredit(NPC_VILE_CREDIT_BUNNY, 0);
                spellHit = true;
            }
        }
    };
};

class npc_lady_nightswood : public CreatureScript
{
public:
    npc_lady_nightswood() : CreatureScript("npc_lady_nightswood") { }

    CreatureAI* GetAI(Creature* pCreature) const
    {
        return new npc_lady_nightswoodAI (pCreature);
    }

    struct npc_lady_nightswoodAI : public ScriptedAI
    {
        npc_lady_nightswoodAI(Creature *c) : ScriptedAI(c) {}

        bool spellHit;

        void Reset()
        {
            spellHit = false;
        }

        void SpellHit(Unit *Hitter, const SpellInfo *Spellkind)
        {
            if ((Spellkind->Id == SPELL_SOVEREIGN_ROD) && !spellHit &&
                (Hitter->GetTypeId() == TYPEID_PLAYER) && (CAST_PLR(Hitter)->IsActiveQuest(QUEST_FREE_YOUR_MIND)))
            {
                CAST_PLR(Hitter)->KilledMonsterCredit(NPC_LADY_NIGHTSWOOD_CREDIT_BUNNY, 0);
                spellHit = true;
            }
        }
    };

};

class npc_leaper : public CreatureScript
{
public:
    npc_leaper() : CreatureScript("npc_leaper") { }

    CreatureAI* GetAI(Creature* pCreature) const
    {
        return new npc_leaperAI (pCreature);
    }

    struct npc_leaperAI : public ScriptedAI
    {
        npc_leaperAI(Creature *c) : ScriptedAI(c) {}

        bool spellHit;

        void Reset()
        {
            spellHit = false;
        }

        void SpellHit(Unit *Hitter, const SpellInfo *Spellkind)
        {
            if ((Spellkind->Id == SPELL_SOVEREIGN_ROD) && !spellHit &&
                (Hitter->GetTypeId() == TYPEID_PLAYER) && (CAST_PLR(Hitter)->IsActiveQuest(QUEST_FREE_YOUR_MIND)))
            {
                CAST_PLR(Hitter)->KilledMonsterCredit(NPC_LEAPER_BUNNY, 0);
                spellHit = true;
            }
        }
    };

};


/*######
Argent Tournament - Spell
Spell Fixed:
    - 62960 - Charge Mount Npc.
    - 62575 - Shield Mount Npc.
    - 62544 - Melee Mount Npc.
    - 62863 - Duel Mount Npc.

DELETE FROM `spell_script_names` WHERE `spell_id` IN (62960,62575,62544,62863);
INSERT INTO `spell_script_names` (`spell_id`, `ScriptName`) VALUES 
('62960', 'spell_tournament_charge'),
('62575', 'spell_tournament_shield'),
('62544', 'spell_tournament_melee'),
('62863', 'spell_tournament_duel');
######*/

class spell_tournament_charge : public SpellScriptLoader
{
public:
    spell_tournament_charge() : SpellScriptLoader("spell_tournament_charge") { }

    class spell_tournament_charge_SpellScript : public SpellScript
    {
        PrepareSpellScript(spell_tournament_charge_SpellScript);

        void HandleEffectScriptEffect(SpellEffIndex /*effIndex*/)
        {
            if (Unit* pTarget = GetHitUnit())
            {
                if (Unit *caster = GetCaster())
                {
                    caster->CastSpell(pTarget,74399,true);
                    caster->CastSpell(pTarget,68321,true);

                    if (pTarget->GetTypeId() == TYPEID_UNIT && pTarget->ToCreature()->GetEntry() == 33272)
                    {
                        // Kill Credit
                        if (Unit *player = caster->GetCharmerOrOwner())
                            player->CastSpell(player,62658,true);
                    }
                }

                if (pTarget->GetAura(64100))
                    pTarget->RemoveAuraFromStack(64100);
                else 
                    if (pTarget->GetAura(62552))
                        pTarget->RemoveAuraFromStack(62552);
                    else 
                        if (pTarget->GetAura(62719))
                            pTarget->RemoveAuraFromStack(62719);
            }
        }

        void Register()
        {
            OnEffectHitTarget += SpellEffectFn(spell_tournament_charge_SpellScript::HandleEffectScriptEffect, EFFECT_0, SPELL_EFFECT_SCRIPT_EFFECT);
        }
    };

    SpellScript *GetSpellScript() const
    {
        return new spell_tournament_charge_SpellScript();
    }
};

class spell_tournament_shield : public SpellScriptLoader
{
public:
    spell_tournament_shield() : SpellScriptLoader("spell_tournament_shield") { }

    class spell_tournament_shield_SpellScript : public SpellScript
    {
        PrepareSpellScript(spell_tournament_shield_SpellScript);

        void HandleEffectScriptEffect(SpellEffIndex /*effIndex*/)
        {
            if (Unit* pTarget = GetHitUnit())
            {
                if (Unit *caster = GetCaster())
                {
                    caster->CastSpell(pTarget,62626,true );

                    if (pTarget->GetTypeId() == TYPEID_UNIT && pTarget->ToCreature()->GetEntry() == 33243)
                    {
                        // Kill Credit
                        if (Unit *player = caster->GetCharmerOrOwner())
                            player->CastSpell(player,62673,true);
                    }
                }

                if (pTarget->GetAura(64100))
                    pTarget->RemoveAuraFromStack(64100);
                else 
                    if (pTarget->GetAura(62552))
                        pTarget->RemoveAuraFromStack(62552);
                    else 
                        if (pTarget->GetAura(62719))
                            pTarget->RemoveAuraFromStack(62719);
            }
        }

        void Register()
        {
            OnEffectHitTarget += SpellEffectFn(spell_tournament_shield_SpellScript::HandleEffectScriptEffect, EFFECT_0, SPELL_EFFECT_SCRIPT_EFFECT);
        }
    };

    SpellScript *GetSpellScript() const
    {
        return new spell_tournament_shield_SpellScript();
    }
};

class spell_tournament_melee : public SpellScriptLoader
{
public:
    spell_tournament_melee() : SpellScriptLoader("spell_tournament_melee") { }

    class spell_tournament_melee_SpellScript : public SpellScript
    {
        PrepareSpellScript(spell_tournament_melee_SpellScript);

        void HandleEffectScriptEffect(SpellEffIndex /*effIndex*/)
        {
            if (Unit* pTarget = GetHitUnit())
            {
                if (Unit *caster = GetCaster())
                {
                    if (pTarget->GetTypeId() == TYPEID_UNIT && pTarget->ToCreature()->GetEntry() == 33229)
                    {
                        // Kill Credit
                        if (Unit *player = caster->GetCharmerOrOwner())
                            player->CastSpell(player,62672,true);
                    }
                }
            }
        }

        void Register()
        {
            OnEffectHitTarget += SpellEffectFn(spell_tournament_melee_SpellScript::HandleEffectScriptEffect, EFFECT_0, SPELL_EFFECT_SCHOOL_DAMAGE);
        }
    };

    SpellScript *GetSpellScript() const
    {
        return new spell_tournament_melee_SpellScript();
    }
};

class spell_tournament_duel : public SpellScriptLoader
{
public:
    spell_tournament_duel() : SpellScriptLoader("spell_tournament_duel") { }

    class spell_tournament_duel_SpellScript : public SpellScript
    {
        PrepareSpellScript(spell_tournament_duel_SpellScript);

        void HandleEffectScriptEffect(SpellEffIndex /*effIndex*/)
        {
            if (Unit* pTarget = GetHitUnit())
            {
                if (pTarget->GetTypeId() != TYPEID_PLAYER)
                    return;

                if (Unit *caster = GetCaster()->GetCharmerOrOwner())
                    caster->CastSpell(pTarget,62875,true);
            }
        }

        void Register()
        {
            OnEffectHitTarget += SpellEffectFn(spell_tournament_duel_SpellScript::HandleEffectScriptEffect, EFFECT_0, SPELL_EFFECT_SCRIPT_EFFECT);
        }
    };

    SpellScript *GetSpellScript() const
    {
        return new spell_tournament_duel_SpellScript();
    }
};

/*######## npc_squire_david######*/

enum eSquireDavid
{
    QUEST_THE_ASPIRANT_S_CHALLENGE_H                    = 13680,
    QUEST_THE_ASPIRANT_S_CHALLENGE_A                    = 13679,
    NPC_ARGENT_VALIANT                                  = 33448,
    GOSSIP_TEXTID_SQUIRE                                = 14407
};

#define GOSSIP_SQUIRE_ITEM_1 "I am ready to fight!"
#define GOSSIP_SQUIRE_ITEM_2 "How do the Argent Crusader raiders fight?"

class npc_squire_david : public CreatureScript
{
public:
    npc_squire_david() : CreatureScript("npc_squire_david") { }

    bool OnGossipHello(Player* player, Creature* creature)
    {
        if (player->GetQuestStatus(QUEST_THE_ASPIRANT_S_CHALLENGE_H) == QUEST_STATUS_INCOMPLETE ||
            player->GetQuestStatus(QUEST_THE_ASPIRANT_S_CHALLENGE_A) == QUEST_STATUS_INCOMPLETE)//We need more info about it.
        {
            player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_SQUIRE_ITEM_1, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
            player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_SQUIRE_ITEM_2, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+2);
        }

        player->SEND_GOSSIP_MENU(GOSSIP_TEXTID_SQUIRE, creature->GetGUID());
        return true;
    }

    bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)
    {
        player->PlayerTalkClass->ClearMenus();
        if (action == GOSSIP_ACTION_INFO_DEF+1)
        {
            player->CLOSE_GOSSIP_MENU();
            creature->SummonCreature(NPC_ARGENT_VALIANT, 8575.451f, 952.472f, 547.554f, 0.38f);
        }
        return true;
    }
};

/*######
## npc_argent_valiant
######*/

enum eArgentValiant
{
    SPELL_KILL_CREDIT           = 63049,
	SPELL_CHARGE                = 63010,
    SPELL_SHIELD_BREAKER        = 65147
};

class npc_argent_valiant : public CreatureScript
{
public:
    npc_argent_valiant() : CreatureScript("npc_argent_valiant") { }

    struct npc_argent_valiantAI : public ScriptedAI
    {
        npc_argent_valiantAI(Creature* creature) : ScriptedAI(creature)
        {
            creature->GetMotionMaster()->MovePoint(0, 8599.258f, 963.951f, 547.553f);
            creature->setFaction(35); //wrong faction in db?
        }

        uint32 uiChargeTimer;
        uint32 uiShieldBreakerTimer;

        void Reset()
        {
            uiChargeTimer = 7000;
            uiShieldBreakerTimer = 10000;
        }

        void MovementInform(uint32 uiType, uint32 /*uiId*/)
        {
            if (uiType != POINT_MOTION_TYPE)
                return;

            me->setFaction(14);
        }

        void DamageTaken(Unit* pDoneBy, uint32& uiDamage)
        {
            if (uiDamage > me->GetHealth() && pDoneBy->GetTypeId() == TYPEID_PLAYER)
            {
                uiDamage = 0;
                pDoneBy->CastSpell(pDoneBy, SPELL_KILL_CREDIT, true);
                me->setFaction(35);
                me->DespawnOrUnsummon(5000);
                me->SetHomePosition(me->GetPositionX(), me->GetPositionY(), me->GetPositionZ(), me->GetOrientation());
                EnterEvadeMode();
            }
        }

        void UpdateAI(uint32 uiDiff)
        {
            if (!UpdateVictim())
                return;

            if (uiChargeTimer <= uiDiff)
            {
                DoCastVictim(SPELL_CHARGE);
                uiChargeTimer = 7000;
            } else uiChargeTimer -= uiDiff;

            if (uiShieldBreakerTimer <= uiDiff)
            {
                DoCastVictim(SPELL_SHIELD_BREAKER);
                uiShieldBreakerTimer = 10000;
            } else uiShieldBreakerTimer -= uiDiff;

            DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_argent_valiantAI(creature);
    }
};

/*######
* npc_training_dummy_argent
######*/
// UPDATE `creature_template` SET `ScriptName`='npc_training_dummy_argent' WHERE `entry`=33229;
// UPDATE `creature_template` SET `ScriptName`='npc_training_dummy_argent' WHERE `entry`=33272;
// UPDATE `creature_template` SET `ScriptName`='npc_training_dummy_argent' WHERE `entry`=33243;
enum eTrainingdummy
{
	CREDIT_RANGE               = 33339,
	CREDIT_CHARGE              = 33340,
	CREDIT_MELEE               = 33341,
	NPC_MELEE                  = 33229,
	NPC_CHARGE                 = 33272,
	NPC_RANGE                  = 33243,
	SPELL_ARGENT_MELEE         = 62544,
	SPELL_ARGENT_CHARGE        = 68321,
	SPELL_ARGENT_BREAK_SHIELD  = 62626,  // spell goes't work
	SPELL_DEFEND_AURA          = 62719,  // it's spell spam in console
	SPELL_DEFEND_AURA_1        = 64100,  // it's spell spam in console
	NPC_ADVANCED_TARGET_DUMMY  = 2674,
	NPC_TARGET_DUMMY           = 2673
};

class npc_training_dummy_argent : public CreatureScript
{
public:
	npc_training_dummy_argent(): CreatureScript("npc_training_dummy_argent"){}
		
	struct npc_training_dummy_argentAI : ScriptedAI
	{
	    npc_training_dummy_argentAI(Creature *pCreature) : ScriptedAI(pCreature)
	    {
			Npc_Entry = pCreature->GetEntry();
	    }

			uint64 Npc_Entry;
			uint32 ResetTimer;
			uint32 DespawnTimer;
			uint32 ShielTimer;
	    void Reset()
	    {
			me->SetControlled(true,UNIT_STATE_STUNNED);//disable rotate
			me->ApplySpellImmune(0, IMMUNITY_EFFECT, SPELL_EFFECT_KNOCK_BACK, true);//imune to knock aways like blast wave
			me->ApplySpellImmune(0, IMMUNITY_MECHANIC, MECHANIC_STUN, true);
			ResetTimer = 5000;
			DespawnTimer = 15000;
			ShielTimer=0;
	    }

	    void EnterEvadeMode()
	    {
			if (!_EnterEvadeMode())
				return;
			Reset();
	    }

	    void DamageTaken(Unit * /*done_by*/, uint32 &damage)
	    {
			ResetTimer = 5000;
			damage = 0;
	    }

	    void EnterCombat(Unit * /*who*/)
	    {
		if (Npc_Entry != NPC_ADVANCED_TARGET_DUMMY && Npc_Entry != NPC_TARGET_DUMMY)
		    return;
	    }

		void SpellHit(Unit* caster,const SpellInfo* spell)
		{		
			if(caster->GetCharmerOrOwner())
			{
			Player * pPlayer = caster->GetCharmerOrOwner()->ToPlayer();
			switch (Npc_Entry)
				{
					case NPC_MELEE: // dummy melee
						if (pPlayer && spell->Id == SPELL_ARGENT_MELEE && (pPlayer->GetQuestStatus(13828) == QUEST_STATUS_INCOMPLETE || pPlayer->GetQuestStatus(13829) == QUEST_STATUS_INCOMPLETE))
							caster->GetCharmerOrOwner()->ToPlayer()->KilledMonsterCredit(CREDIT_MELEE, 0);
								return;
					case NPC_CHARGE: // dummy charge
						if (pPlayer && spell->Id == SPELL_ARGENT_CHARGE && (pPlayer->GetQuestStatus(13837) == QUEST_STATUS_INCOMPLETE || pPlayer->GetQuestStatus(13839) == QUEST_STATUS_INCOMPLETE))
							caster->GetCharmerOrOwner()->ToPlayer()->KilledMonsterCredit(CREDIT_CHARGE, 0);
								return;
					case NPC_RANGE: // dummy range
						if (pPlayer && spell->Id == SPELL_ARGENT_BREAK_SHIELD && (pPlayer->GetQuestStatus(13835) == QUEST_STATUS_INCOMPLETE || pPlayer->GetQuestStatus(13838) == QUEST_STATUS_INCOMPLETE))
							caster->GetCharmerOrOwner()->ToPlayer()->KilledMonsterCredit(CREDIT_RANGE, 0);
								return;
				}
			}
		}

	    void UpdateAI(const uint32 diff)
	    {
			if (ShielTimer <= diff)
			{
				if(Npc_Entry == NPC_RANGE)
					me->CastSpell(me,SPELL_DEFEND_AURA,true);

			if(Npc_Entry == NPC_CHARGE && !me->GetAura(SPELL_DEFEND_AURA_1))
						me->CastSpell(me,SPELL_DEFEND_AURA_1,true);
				ShielTimer = 8000;
			}
			else
				ShielTimer -= diff;

		if (!UpdateVictim())
		    return;
		if (!me->HasUnitState(UNIT_STATE_STUNNED))
		    me->SetControlled(true,UNIT_STATE_STUNNED);//disable rotate
			
		if (Npc_Entry != NPC_ADVANCED_TARGET_DUMMY && Npc_Entry != NPC_TARGET_DUMMY)
		{
			if (ResetTimer <= diff)
			{
				EnterEvadeMode();
				ResetTimer = 5000;
			}
			else
				ResetTimer -= diff;
				return;
			}
			else
			{
			if (DespawnTimer <= diff)
				me->DespawnOrUnsummon();
			else
				DespawnTimer -= diff;
			}
	    }
	    void MoveInLineOfSight(Unit * /*who*/){return;}
	};

	CreatureAI* GetAI(Creature* pCreature) const
	{
	    return new npc_training_dummy_argentAI(pCreature);
	}

};

void AddSC_ArgentTournament()
{
    new npc_training_dummy_argent;
}

/*########
## npc_tournament_dummy
 #########*/

enum TournamentDummySpells {
    SPELL_TOURNAMENT_CHARGE_CREDIT = 62658, // Mastery Of The Charge
    SPELL_TOURNAMENT_BLOCK_CREDIT = 62672, // Mastery Of Melee
    SPELL_TOURNAMENT_SPECIAL_CREDIT = 62673, // Mastery Of The Shield-Breaker
    SPELL_CONTER_ATTACK = 62889,
};

enum TorunamentDummyEntrys {
    ENTRY_MELEE_DUMMY = 33229,
    ENTRY_CHARGE_DUMMY = 33272,
    ENTRY_RANGE_DUMMY = 33243,
};

class npc_tournament_dummy: public CreatureScript {
public:
    npc_tournament_dummy() :
            CreatureScript("npc_tournament_dummy") {
    }

    CreatureAI* GetAI(Creature* creature) const {
        return new npc_tournament_dummyAI(creature);
    }

    struct npc_tournament_dummyAI: public ScriptedAI {
        npc_tournament_dummyAI(Creature* creature) :
                ScriptedAI(creature) {
        }

        uint32 ResetTimer;

        void Reset() {
            ResetTimer = 10000;
        }

        void SpellHit(Unit* caster, const SpellInfo* spell) {
            Player* playercaster = NULL;
            if (!caster || !caster->ToPlayer()) {
                if (caster->IsVehicle() && caster->ToCreature()) {
                    Creature* creatureVec = caster->ToCreature();
                    if (Unit* passager = creatureVec->GetVehicleKit()->GetPassenger(0)) {
                        if (passager->ToPlayer())
                            playercaster = passager->ToPlayer();
                    }
                }
            } else {
                playercaster = caster->ToPlayer();
            }

            if (!playercaster)
                return;

            switch (spell->Id) {
            case 62544:
                if (me->GetEntry() == ENTRY_MELEE_DUMMY)
                    me->CastSpell(playercaster, SPELL_TOURNAMENT_BLOCK_CREDIT,
                            true);
                break;
            case 62626:
                if (me->GetEntry() == ENTRY_RANGE_DUMMY)
                    if (me->GetAura(62665))
                        me->CastSpell(playercaster,
                                SPELL_TOURNAMENT_SPECIAL_CREDIT, true);
                break;
            case 68321:
                if (me->GetEntry() == ENTRY_CHARGE_DUMMY)
                    me->CastSpell(playercaster, SPELL_TOURNAMENT_CHARGE_CREDIT,
                            true);
                break;
            }
        }

        void DamageTaken(Unit *done_by, uint32 &damage) {
            damage = 0;

            if (done_by->GetTypeId() != TYPEID_PLAYER
                    && (done_by->GetTypeId() != TYPEID_UNIT
                            || (!done_by->isGuardian() && !done_by->isPet())))
                return;

            ResetTimer = 10000;
        }

        void MoveInLineOfSight(Unit *who) {
            return;
        }

        void UpdateAI(const uint32 uiDiff) {
            if (!UpdateVictim())
                return;

            if (ResetTimer <= uiDiff) {
                EnterEvadeMode();
                ResetTimer = 10000;
                return;
            } else
                ResetTimer -= uiDiff;
        }
    };
};

/*######
## npc_argent_champion
 ######*/
// To Do Argent Valiant, Faction Valiant, Argent Champion and Faction Champion have the same script -> make one
enum eArgentChampion {
    //SPELL_CHARGE                = 63010,
    //SPELL_SHIELD_BREAKER        = 65147,

    SPELL_ARGENT_CRUSADE_CHAMPION = 63501,
    SPELL_GIVE_KILL_CREDIT_CHAMPION = 63516,
};

class npc_argent_champion: public CreatureScript {
public:
    npc_argent_champion() :
            CreatureScript("npc_argent_champion") {
    }

    struct npc_argent_championAI: public ScriptedAI {
        npc_argent_championAI(Creature* creature) :
                ScriptedAI(creature) {
            creature->GetMotionMaster()->MovePoint(0, 8561.30f, 1113.30f,
                    556.9f);
            creature->setFaction(35); //wrong faction in db?
        }

        uint32 uiChargeTimer;
        uint32 uiShieldBreakerTimer;

        void Reset() {
            uiChargeTimer = 7000;
            uiShieldBreakerTimer = 10000;
        }

        void MovementInform(uint32 uiType, uint32 /*uiId*/) {
            if (uiType != POINT_MOTION_TYPE)
                return;

            me->SetHomePosition(me->GetPositionX(), me->GetPositionY(),
                    me->GetPositionZ(), me->GetOrientation());
            me->setFaction(14);
        }

        void DamageTaken(Unit* pDoneBy, uint32& uiDamage) {
            if (uiDamage > me->GetHealth()
                    && pDoneBy->GetTypeId() == TYPEID_PLAYER) {
                uiDamage = 0;
                if (pDoneBy->HasAura(63034))
                    pDoneBy->CastSpell(pDoneBy, SPELL_GIVE_KILL_CREDIT_CHAMPION,
                            true);
                me->setFaction(35);
                me->DespawnOrUnsummon(5000);
                me->SetHomePosition(me->GetPositionX(), me->GetPositionY(),
                        me->GetPositionZ(), me->GetOrientation());
                EnterEvadeMode();
            }
        }

        void UpdateAI(const uint32 uiDiff) {
            if (!UpdateVictim())
                return;

            if (uiChargeTimer <= uiDiff) {
                DoCastVictim(SPELL_CHARGE);
                uiChargeTimer = 7000;
            } else
                uiChargeTimer -= uiDiff;

            if (uiShieldBreakerTimer <= uiDiff) {
                DoCastVictim(SPELL_SHIELD_BREAKER);
                uiShieldBreakerTimer = 10000;
            } else
                uiShieldBreakerTimer -= uiDiff;

            if (me->isAttackReady()) {
                DoCast(me->getVictim(), SPELL_THRUST, true);
                me->resetAttackTimer();
            }
        }
    };

    CreatureAI *GetAI(Creature* creature) const {
        return new npc_argent_championAI(creature);
    }
};

/*######
 npc_squire_danny
 ######*/

enum eSquireDanny {
    QUEST_THE_VALIANT_S_CHALLENGE_HORDE_UNDERCITY = 13729,
    QUEST_THE_VALIANT_S_CHALLENGE_HORDE_SENJIN = 13727,
    QUEST_THE_VALIANT_S_CHALLENGE_HORDE_THUNDERBLUFF = 13728,
    QUEST_THE_VALIANT_S_CHALLENGE_HORDE_SILVERMOON = 13731,
    QUEST_THE_VALIANT_S_CHALLENGE_HORDE_ORGRIMMAR = 13726,
    QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_DARNASSUS = 13725,
    QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_IRONFORGE = 13713,
    QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_GNOMEREGAN = 13723,
    QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_EXODAR = 13724,
    QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_STORMWIND = 13699,

    NPC_ARGENT_CHAMPION = 33707,
    SPELL_SUMMON_ARGENT_CHAMPION = 63171,

    GOSSIP_TEXTID_SQUIRE_DANNY = 14407
};

class npc_squire_danny: public CreatureScript {
public:
    npc_squire_danny() :
            CreatureScript("npc_squire_danny") {
    }

    bool OnGossipSelect(Player* pPlayer, Creature* creature, uint32 uiSender,
            uint32 uiAction) {
        pPlayer->PlayerTalkClass->ClearMenus();
        if (uiAction == GOSSIP_ACTION_INFO_DEF + 1) {
            pPlayer->CLOSE_GOSSIP_MENU();
            creature->CastSpell(pPlayer, SPELL_SUMMON_ARGENT_CHAMPION, false);
        }
        //else
        //pPlayer->SEND_GOSSIP_MENU(???, creature->GetGUID()); Missing text
        return true;
    }

    bool OnGossipHello(Player* pPlayer, Creature* creature) {
        if (pPlayer->HasAura(63034)
                && ((pPlayer->GetQuestStatus(
                        QUEST_THE_VALIANT_S_CHALLENGE_HORDE_UNDERCITY)
                        == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_HORDE_SENJIN)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_HORDE_THUNDERBLUFF)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_HORDE_SILVERMOON)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_HORDE_ORGRIMMAR)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_DARNASSUS)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_IRONFORGE)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_GNOMEREGAN)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_EXODAR)
                                == QUEST_STATUS_INCOMPLETE)
                        || (pPlayer->GetQuestStatus(
                                QUEST_THE_VALIANT_S_CHALLENGE_ALLIANCE_STORMWIND)
                                == QUEST_STATUS_INCOMPLETE))) {
            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_SQUIRE_ITEM_1, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_SQUIRE_ITEM_2, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+2);
        }

        pPlayer->SEND_GOSSIP_MENU(GOSSIP_TEXTID_SQUIRE_DANNY, creature->GetGUID());
        return true;
    }
};

/*######## npc_vendor_argent_tournament
UPDATE `creature_template` SET `ScriptName`='npc_vendor_argent_tournament' WHERE `entry` IN (33553, 33554, 33556, 33555, 33557, 33307, 33310, 33653, 33650, 33657);
######*/

const uint32 ArgentTournamentVendor[10][4] =
{
    {33553,13726,2,14460},  // Orc
    {33554,13726,8,14464},  // Troll
    {33556,13728,6,14458},  // Tauren
    {33555,13729,5,14459},  // Undead
    {33557,13731,10,14465}, // Blood Elf
    {33307,13699,1,14456},  // Human
    {33310,13713,3,14457},  // Dwarf
    {33653,13725,4,14463},  // Night Elf
    {33650,13723,7,14462},  // Gnome
    {33657,13724,11,14461}  // Draenei
};

class npc_vendor_argent_tournament : public CreatureScript
{
public:
    npc_vendor_argent_tournament() : CreatureScript("npc_vendor_argent_tournament") { }

    bool OnGossipHello(Player* pPlayer, Creature* pCreature)
    {
        bool npcCheck = false;
        bool questCheck = false;
        bool raceCheck = false;
        uint32 textId = 0;
	
        for (int i = 0; (i < 10) && !npcCheck; i++)
        {
            if (pCreature->GetEntry() == ArgentTournamentVendor[i][0])
            {
                npcCheck = true;
                questCheck = pPlayer->GetQuestStatus(ArgentTournamentVendor[i][1]) == QUEST_STATUS_COMPLETE;
                raceCheck = pPlayer->getRace() == ArgentTournamentVendor[i][2];
                textId = ArgentTournamentVendor[i][3];
		    }
	    }
	
        if (questCheck || raceCheck)
            pPlayer->GetSession()->SendListInventory(pCreature->GetGUID()); 
        else
            pPlayer->SEND_GOSSIP_MENU(textId, pCreature->GetGUID());
        return true;
    }
};

/*######## npc_valiant  ######*/

#define GOSSIP_VALIANT_1    "I am ready to fight."
#define GOSSIP_VALIANT_GOSS "Are you sure you ready to fight a champion?"
#define SAY_START_1         "On your guard!"
#define SAY_START_2         "Prepare yourself!"
#define SAY_END             "I have been defeated. Good Fight !"

enum ValiantQuest
{
    QUEST_AMONG_THECHAMPIONS_A      = 13790,
    QUEST_AMONG_THECHAMPIONS_H      = 13811,
    QUEST_AMONG_THECHAMPIONS_A2     = 13793,
    QUEST_AMONG_THECHAMPIONS_H2     = 13814,
    MOUNTED_MELEE_VICTORY           = 63596

};

class npc_valiant : public CreatureScript
{
public:
    npc_valiant() : CreatureScript("npc_valiant") { }

    struct npc_valiantAI : public ScriptedAI
    {
        Unit *pTarget;
        uint32 SpellTimer,MoviTimer;
        int8 x,y;    
       
        npc_valiantAI(Creature* pCreature) : ScriptedAI(pCreature){}
       
        void Escudo()
        {
            if (Aura *cAura = me->GetAura(DEFEND))
            {
                switch (cAura->GetStackAmount())
                {
                    case 1:
                        me->RemoveAura(SHIELD_LEVEL2);
                        me->RemoveAura(SHIELD_LEVEL3);
                        me->CastSpell(me, SHIELD_LEVEL1, true);
                        break;
                    case 2:
                        me->RemoveAura(SHIELD_LEVEL1);
                        me->RemoveAura(SHIELD_LEVEL3);
                        me->CastSpell(me, SHIELD_LEVEL2, true);
                        break;
                    case 3:
                        me->RemoveAura(SHIELD_LEVEL2);
                        me->RemoveAura(SHIELD_LEVEL1);
                        me->CastSpell(me, SHIELD_LEVEL3, true);
                        break;
                }
            }
        }

        void Reset()
        {
            me->setFaction(35);
            me->SetReactState(REACT_PASSIVE);
            me->SetVisible(true);
        }
       
        void EnterCombat(Unit* who)
        {
            SpellTimer= urand(TIMER_SPELL_MIN,TIMER_SPELL_MAX );
            MoviTimer = urand(TIMER_MoviTimer_MIN,TIMER_MoviTimer_MAX);
        }
       
        void JustDied(Unit* Killer)
        {
            me->MonsterSay(SAY_END, LANG_UNIVERSAL, 0);
            me->setFaction(35);
            me->SetHealth(1);
            pTarget->CastSpell(pTarget, MOUNTED_MELEE_VICTORY, true);
            me->SetVisible(false);
        }
       
        void KilledUnit(Unit *victim)
        {
            Reset();
            EnterEvadeMode();
        }
       
        void SpellHit(Unit *caster, const SpellInfo *spell)
        {
            if ((spell->Id == SHIELD_BREAKER)||(spell->Id == CHARGE))
            {
                if (Aura *cAura = me->GetAura(DEFEND))
                {
                    switch (cAura->GetStackAmount())
                    {
                        case 0:
                        case 1:
                            me->RemoveAura(DEFEND);
                            me->RemoveAura(SHIELD_LEVEL2);
                            me->RemoveAura(SHIELD_LEVEL3);
                            me->RemoveAura(SHIELD_LEVEL1);
                            break;
                        case 2:
                            cAura->SetStackAmount(1);
                            break;
                        case 3:
                            cAura->SetStackAmount(2);
                            break;
                    }
                }
                Escudo();
            }
        }

        void SpellHitTarget(Unit *pTarget, const SpellInfo *spell)
        {
            if ((spell->Id == SHIELD_BREAKER)||(spell->Id == CHARGE))
            {
                if (Aura *pAura = pTarget->GetAura(DEFEND))
                {
                    switch (pAura->GetStackAmount())
                    {
                        case 0:
                            pTarget->RemoveAura(DEFEND);
                            break;
                        case 1:
                            pAura->SetStackAmount(0);
                            break;
                        case 2:
                            pAura->SetStackAmount(1);
                            break;
                        case 3:
                            pAura->SetStackAmount(2);
                            break;
                    }
                }
            }
        }

        void UpdateAI(const uint32 uiDiff)
        {
            if (!UpdateVictim())
                return;

            pTarget = SelectTarget(SELECT_TARGET_TOPAGGRO, 0, 200, true);
               
            if (SpellTimer<=uiDiff)
            {
                if (pTarget && me->IsInRange(pTarget,5,40,false))
                {
                    switch (urand(0,7))
                    {
                        case 0: 
                        case 1: 
                        case 2: 
                            DoCastAOE(SHIELD_BREAKER, true);
                            break;
                        case 3: 
                        case 4:
                        case 5:
                        case 6:
                            DoCastAOE(CHARGE, true);
                            break;
                        case 7:
                            me->CastSpell(me, DEFEND, true);
                            Escudo();
                            break;
                    }
                }
                else
                {
                    switch (urand(0,4))
                    {
                        case 0: 
                            me->CastSpell(me, DEFEND, true);
                            Escudo();
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            DoCastAOE(THRUST, true);
                            break;
                    }
                }
                SpellTimer= urand(TIMER_SPELL_MIN,TIMER_SPELL_MAX );
            } else 
                SpellTimer -= uiDiff;
            if (MoviTimer<=uiDiff)
            {
                x =urand(0,7);
                y =urand(0,7);
                switch (urand(0,3))
                {
                    case 0:
                        me->GetMotionMaster()->MovePoint(0, (pTarget->GetPositionX()+x), (pTarget->GetPositionY()+y), pTarget->GetPositionZ());
                        break;
                    case 1: 
                        me->GetMotionMaster()->MovePoint(0, (pTarget->GetPositionX()-x), (pTarget->GetPositionY()+y), pTarget->GetPositionZ());
                        break;
                    case 2: 
                        me->GetMotionMaster()->MovePoint(0, (pTarget->GetPositionX()+x), (pTarget->GetPositionY()-y), pTarget->GetPositionZ());
                        break;
                    case 3: 
                        me->GetMotionMaster()->MovePoint(0, (pTarget->GetPositionX()-x), (pTarget->GetPositionY()-y), pTarget->GetPositionZ());
                        break;
                }
                MoviTimer = urand(TIMER_MoviTimer_MIN,TIMER_MoviTimer_MAX);
                } else 
                    MoviTimer -= uiDiff;

                DoMeleeAttackIfReady();
        }
    };

    bool OnGossipHello(Player* pPlayer, Creature* pCreature)
    {
        if (pCreature->isQuestGiver())
            pPlayer->PrepareQuestMenu(pCreature->GetGUID());

        if (((pPlayer->GetQuestStatus(QUEST_AMONG_THECHAMPIONS_H) == QUEST_STATUS_INCOMPLETE)  ||
            (pPlayer->GetQuestStatus(QUEST_AMONG_THECHAMPIONS_H2) == QUEST_STATUS_INCOMPLETE) ||
            (pPlayer->GetQuestStatus(QUEST_AMONG_THECHAMPIONS_A) == QUEST_STATUS_INCOMPLETE)  ||
            (pPlayer->GetQuestStatus(QUEST_AMONG_THECHAMPIONS_A2) == QUEST_STATUS_INCOMPLETE)) &&
            (pPlayer->HasAura(RIDE_VEHICLE)) &&
            (pPlayer->HasAura(PLAYER_ON_TOURNAMENT_MOUNT)) &&
            (pPlayer->HasAura(LANCE_EQUIPPED)) &&
            (!pPlayer->isInCombat()))

        {
            pPlayer->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, GOSSIP_VALIANT_1, GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+1);
            pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());
            return true;
        }
        return false;
    }

    bool OnGossipSelect(Player* pPlayer, Creature* pCreature, uint32 /*uiSender*/, uint32 uiAction)
    {
        pPlayer->PlayerTalkClass->ClearMenus();
        if (uiAction == GOSSIP_ACTION_INFO_DEF+1)
        {
            pPlayer->CLOSE_GOSSIP_MENU();
            pCreature->setFaction(14);
            pCreature->SetReactState(REACT_AGGRESSIVE);
            pCreature->MonsterSay(urand(0,1) ? SAY_START_1 : SAY_START_2, LANG_UNIVERSAL, 0);
            pCreature->AI()->AttackStart(pPlayer);
            pCreature->AddThreat(pPlayer, 0.0f);
            pCreature->SetInCombatWith(pPlayer);
            pPlayer->SetInCombatWith(pCreature);
        }
        return true;
    }        
            
    CreatureAI* GetAI(Creature* pCreature) const
    {
        return new npc_valiantAI (pCreature);
    }
};